;; In Emacs, open this file in -*- Scheme -*- mode.

;; Integers

(def int? (fun (o) (@int? o)))

(def + (fun (x y) (@+ x y)))
(def - (fun (x y) (@- x y)))
(def * (fun (x y) (@* x y)))
(def / (fun (x y) (@/ x y)))
(def % (fun (x y) (@% x y)))

(def < (fun (x y) (@< x y)))
(def <= (fun (x y) (@<= x y)))
(def = (fun (x y) (@= x y)))
(def != (fun (x y) (@!= x y)))
(def > (fun (x y) (@> x y)))
(def >= (fun (x y) (@>= x y)))

(def int-arithmetic-shift
     (fun (x y)
          (if (>= y 0) (@<< x y) (@>> x (- 0 y)))))
(def int-bitwise-and (fun (x y) (@& x y)))
(def int-bitwise-or (fun (x y) (@| x y)))
(def int-bitwise-xor (fun (x y) (@^ x y)))

(def int-even?
     (fun (i) (= 0 (int-bitwise-and 1 i))))

(def int-odd?
     (fun (i) (not (int-even? i))))

(def int-abs
     (fun (i) (if (< i 0) (- 0 i) i)))

(def int-signum (fun (i)
                     (cond ((< i 0) -1)
                           ((= i 0)  0)
                           (#t       1))))

(def int-gcd
     (fun (x y)
          (rec loop ((x (int-abs x))
                     (y (int-abs y)))
               (if (= 0 y)
                   x
                   (loop y (% x y))))))

(defrec int-pow
  (fun (x y)
       (cond ((= 0 y)
              1)
             ((int-even? y)
              (let ((t (int-pow x (/ y 2))))
                (* t t)))
             (#t
              (* x (int-pow x (- y 1)))))))

(def int-read
     (letrec ((loop
               (fun (acc-f acc)
                    (let ((c (char-read)))
                      (if (char-digit? c)
                          (loop acc-f (acc-f (* acc 10) (char-digit->int c)))
                          acc)))))
       (fun ()
            (let ((c (char-read)))
              (cond ((= c '-') (loop - 0))
                    ((char-digit? c) (loop + (char-digit->int c)))
                    (#t 0))))))

(defrec int-print
  (fun (i)
    (if (>= i 10)
       (begin (int-print (/ i 10)) (char-print (int->char-digit (% i 10))))
       (char-print (int->char-digit i)))
       ))

(def int->char (fun (i) (@int->char i)))
